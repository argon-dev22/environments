- hosts: local
  gather_facts: yes
  vars:
    common_brew_packages:
      - zsh
      - asdf
      - chezmoi

  pre_tasks:
    - name: OS/アーキ情報を確認
      debug:
        msg:
          - "system={{ ansible_facts.system }}"
          - "os_family={{ ansible_facts.os_family }}"
          - "machine={{ ansible_facts.machine }}"

    # ---- Homebrew / zsh のパス計算 ----
    - name: brew/zsh パス（macOS）
      set_fact:
        brew_bin: "/opt/homebrew/bin"
        zsh_path: "/opt/homebrew/bin/zsh"
      when:
        - ansible_facts.os_family == "Darwin"
        - ansible_facts.machine in ["arm64", "aarch64"]
      
    - name: brew/zsh パス（macOS Intel）
      set_fact:
        brew_bin: "/usr/local/bin"
        zsh_path: "/usr/local/bin/zsh"
        brew_prefix: "/usr/local"
      when:
        - ansible_facts.os_family == "Darwin"
        - ansible_facts.machine not in ["arm64", "aarch64"]

    - name: brew(Linuxbrew)/zsh パス（Debian/WSL）
      set_fact:
        brew_bin: "/home/linuxbrew/.linuxbrew/bin"
        zsh_path: "/home/linuxbrew/.linuxbrew/bin/zsh"
      when: ansible_facts.os_family == "Debian"
    
    # ---- エラーハンドリング ----
    - name: サポートされていないOS/アーキテクチャの場合はエラー
      fail:
        msg: "未対応のOS/アーキテクチャ: {{ ansible_facts.os_family }}/{{ ansible_facts.machine }}"
      when: brew_bin == ""

  tasks:
    # ---- Homebrew の存在確認・インストール ----
    - name: Homebrew がすでにインストールされているか確認
      command: "{{ brew_bin }}/brew --version"
      register: brew_exists
      changed_when: false
      failed_when: false

    - name: インストールされていない場合は Homebrew をインストール
      shell: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      when: brew_exists.rc != 0

    # ---- Homebrew の PATH を通す ----
    - name: Homebrew の shellenv を ~/.zprofile に追記
      lineinfile:
        path: "{{ ansible_env.HOME }}/.zprofile"
        create: true
        line: 'eval "$({{ brew_bin }}/brew shellenv)"'
        state: present

    # ---- Homebrew パッケージのインストール ----
    - name: build-essential をインストール（Debian/WSL）
      apt:
        name: build-essential
        update_cache: yes
      become: yes
      when: ansible_facts.os_family == "Debian"

    - name: パッケージをインストール
      shell: "{{ brew_bin }}/brew install {{ item }}"
      loop: "{{ common_brew_packages }}"

    # ---- /etc/shells に zsh を登録 ----
    - name: zsh のパスが /etc/shells に登録済みか確認
      command: "grep -Fx '{{ zsh_path }}' /etc/shells"
      register: shells_has_zsh
      changed_when: false
      failed_when: false

    - name: /etc/shells に zsh を追記
      lineinfile:
        path: /etc/shells
        line: "{{ zsh_path }}"
        state: present
      when: 
        - shells_has_zsh.rc != 0
      become: yes

    # ---- 既定シェルを zsh に変更 ----
    - name: 現在のログインシェルを取得
      command: /bin/sh -lc 'echo "$SHELL"'
      register: current_shell
      changed_when: false

    - name: 既定シェルを zsh に変更
      command: "chsh -s {{ zsh_path }} {{ ansible_user_id }}"
      when: 
        - current_shell.stdout != zsh_path
      become: yes

    # ---- 動作確認 ----
    - name: ツールのバージョン確認
      shell: "{{ brew_bin }}/{{ item }} --version"
      loop: "{{ common_brew_packages }}"
      register: tool_checks
      changed_when: false
      no_log: true
    
    - name: インストールされたツールのバージョン情報を表示
      debugj:
        msg: "{{ item.item }}: {{ item.stdout }}"
      loop: "{{ tool_checks.results }}"
      when: item.rc == 0
    
    # ---- dotfiles のセットアップ ----
    - name: ホームディレクトリの確認
      debug:
        msg: "{{ ansible_facts.user_dir }}"

    - name: chezmoi のセットアップ
      command: "{{ brew_bin }}/chezmoi init --source ../dotfiles --apply"
