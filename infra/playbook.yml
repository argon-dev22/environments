---
- hosts: local
  gather_facts: yes
  vars:
    packages: [zsh, asdf, chezmoi, age]
    
    paths:
      home: "{{ ansible_env.HOME }}"
      chezmoi_config: "{{ ansible_env.HOME }}/.config/chezmoi"
      age_config: "{{ ansible_env.HOME }}/.config/age"
      age_key: "{{ ansible_env.HOME }}/.config/age/age.key"
      chezmoi_source: "{{ ansible_env.HOME }}/.local/share/chezmoi"
      zprofile: "{{ ansible_env.HOME }}/.zprofile"
      tool_versions: "{{ ansible_env.HOME }}/.tool-versions"

    brew_configs:
      Darwin_arm64: &darwin_arm
        bin: "/opt/homebrew/bin"
        prefix: "/opt/homebrew"
        zsh: "/opt/homebrew/bin/zsh"
      Darwin_aarch64: *darwin_arm
      Darwin_x86_64: &darwin_intel
        bin: "/usr/local/bin"
        prefix: "/usr/local"
        zsh: "/usr/local/bin/zsh"
      Darwin_i386: *darwin_intel
      Debian_default: &linux_brew
        bin: "/home/linuxbrew/.linuxbrew/bin"
        prefix: "/home/linuxbrew/.linuxbrew"
        zsh: "/home/linuxbrew/.linuxbrew/bin/zsh"

  pre_tasks:
    - name: Display system information
      debug:
        msg: "Platform: {{ ansible_facts.os_family }}/{{ ansible_facts.machine }}"

    - name: Set platform-specific configuration
      set_fact:
        brew: "{{ brew_configs[ansible_facts.os_family + '_' + ansible_facts.machine] | default(brew_configs[ansible_facts.os_family + '_default'], {}) }}"

    - name: Validate platform support
      fail:
        msg: "Unsupported platform: {{ ansible_facts.os_family }}/{{ ansible_facts.machine }}"
      when: brew == {}

    - name: Set asdf configuration
      set_fact:
        asdf_sh: "{{ brew.prefix }}/opt/asdf/libexec/asdf.sh"

  tasks:
    - name: Check Homebrew installation
      command: "{{ brew.bin }}/brew --version"
      register: brew_check
      changed_when: false
      failed_when: false

    - name: Install Homebrew
      shell: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      when: brew_check.rc != 0

    - name: Configure shell environment
      lineinfile:
        path: "{{ paths.zprofile }}"
        create: true
        line: "{{ item }}"
        state: present
      loop:
        - 'eval "$({{ brew.bin }}/brew shellenv)"'
        - 'export AGE_IDENTITIES_FILE="{{ paths.age_key }}"'
        - '. {{ asdf_sh }}'

    - name: Install system dependencies
      apt:
        name: build-essential
        update_cache: yes
      become: yes
      when: ansible_facts.os_family == "Debian"

    - name: Check existing packages
      command: "{{ brew.bin }}/brew list --versions {{ item }}"
      loop: "{{ packages }}"
      register: package_check
      changed_when: false
      failed_when: false

    - name: Install missing packages
      shell: "{{ brew.bin }}/brew install {{ item.item }}"
      loop: "{{ package_check.results }}"
      when: item.rc != 0

    - name: Configure zsh as default shell
      block:
        - name: Register zsh in /etc/shells
          lineinfile:
            path: /etc/shells
            line: "{{ brew.zsh }}"
            state: present
          become: yes

        - name: Get current shell
          command: /bin/sh -lc 'echo "$SHELL"'
          register: current_shell
          changed_when: false

        - name: Set default shell to zsh
          user:
            name: "{{ ansible_user_id }}"
            shell: "{{ brew.zsh }}"
          become: yes
          when: current_shell.stdout != brew.zsh

    - name: Setup encryption and dotfiles management
      block:
        - name: Create configuration directories
          file:
            path: "{{ item.path }}"
            state: directory
            mode: "{{ item.mode }}"
          loop:
            - { path: "{{ paths.chezmoi_config }}", mode: '0755' }
            - { path: "{{ paths.age_config }}", mode: '0700' }

        - name: Deploy age private key
          copy:
            content: "{{ age_private_key_content }}"
            dest: "{{ paths.age_key }}"
            mode: '0600'
          no_log: true

        - name: Extract age public key
          command: "{{ brew.bin }}/age-keygen -y {{ paths.age_key }}"
          register: age_public_key
          changed_when: false

        - name: Generate chezmoi configuration
          template:
            src: chezmoi.toml.j2
            dest: "{{ paths.chezmoi_config }}/chezmoi.toml"
            mode: '0644'
          vars:
            age_public_key: "{{ age_public_key.stdout.strip() }}"
            age_key_file: "{{ paths.age_key }}"
            brew_prefix: "{{ brew.prefix }}"

        - name: Check existing repository
          stat:
            path: "{{ paths.chezmoi_source }}"
          register: repo_exists

        - name: Initialize chezmoi repository
          command: "{{ brew.bin }}/chezmoi init {{ chezmoi_repo_url }}"
          when: not repo_exists.stat.exists

        - name: Update existing repository
          command: "git -C {{ paths.chezmoi_source }} pull"
          register: git_pull
          changed_when: "'Already up to date.' not in git_pull.stdout"
          when: repo_exists.stat.exists

        - name: Verify configuration
          command: "{{ brew.bin }}/chezmoi doctor"
          register: doctor_result
          changed_when: false

        - name: Preview changes
          command: "{{ brew.bin }}/chezmoi diff"
          register: diff_result
          changed_when: false
          failed_when: false

        - name: Display pending changes
          debug:
            msg: "{{ diff_result.stdout_lines }}"
          when: diff_result.stdout != ""

        - name: Apply dotfiles
          command: "{{ brew.bin }}/chezmoi apply -v"
          register: apply_result

        - name: Get final status
          command: "{{ brew.bin }}/chezmoi status"
          register: final_status
          changed_when: false

      environment:
        AGE_IDENTITIES_FILE: "{{ paths.age_key }}"

    - name: Setup asdf version management
      block:
        - name: Check .tool-versions file exists
          stat:
            path: "{{ paths.tool_versions }}"
          register: tool_versions_file

        - name: Read .tool-versions content
          slurp:
            src: "{{ paths.tool_versions }}"
          register: tool_versions_raw
          when: tool_versions_file.stat.exists

        - name: Parse .tool-versions content
          set_fact:
            asdf_tools: >-
              {{
                (tool_versions_raw.content | b64decode).splitlines()
                | map('trim')
                | reject('match', '^(#|$)')
                | map('split')
                | list
              }}
          when: 
            - tool_versions_file.stat.exists
            - tool_versions_raw.content is defined

        - name: Display detected tools
          debug:
            msg: "Detected asdf tools: {{ asdf_tools | map('join', ' ') | list | join(', ') }}"
          when: asdf_tools is defined and asdf_tools | length > 0

        - name: Get currently installed plugins
          shell: '. "{{ asdf_sh }}" && asdf plugin list'
          register: installed_plugins
          changed_when: false
          failed_when: false
          when: asdf_tools is defined

        - name: Install missing asdf plugins
          shell: '. "{{ asdf_sh }}" && asdf plugin add {{ item[0] }}'
          loop: "{{ asdf_tools }}"
          when: 
            - asdf_tools is defined
            - item[0] not in (installed_plugins.stdout_lines | default([]))
          register: plugin_results
          failed_when: false

        - name: Handle nodejs plugin requirements
          shell: '. "{{ asdf_sh }}" && bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring'
          when: 
            - asdf_tools is defined
            - asdf_tools | map('first') | list | select('match', 'nodejs') | list | length > 0
          failed_when: false
          changed_when: false

        - name: Install tools from .tool-versions
          shell: '. "{{ asdf_sh }}" && cd "{{ paths.home }}" && asdf install'
          when: asdf_tools is defined
          register: install_result

        - name: Reshim asdf executables
          shell: '. "{{ asdf_sh }}" && asdf reshim'
          when: asdf_tools is defined

        - name: Verify asdf current versions
          shell: '. "{{ asdf_sh }}" && asdf current'
          register: asdf_current
          changed_when: false
          when: asdf_tools is defined

        - name: Display installed versions
          debug:
            msg: "{{ asdf_current.stdout_lines }}"
          when: 
            - asdf_tools is defined
            - asdf_current.stdout_lines is defined

      when: tool_versions_file.stat.exists

    - name: Verify installation
      block:
        - name: Check tool versions
          command: "{{ brew.bin }}/{{ item }} --version"
          loop: "{{ packages }}"
          register: versions
          changed_when: false
          failed_when: false

        - name: Display setup summary
          debug:
            msg:
              - "=== Setup Complete ==="
              - "Encryption: Enabled (age)"
              - "Configuration: {{ paths.chezmoi_config }}/chezmoi.toml"
              - "Status: {{ final_status.stdout_lines | join(', ') if final_status.stdout_lines else 'Clean' }}"
              - "Tools: {{ versions.results | selectattr('rc', 'equalto', 0) | map(attribute='item') | list | join(', ') }}"
              - "ASDF Tools: {{ asdf_tools | map('join', ' ') | list | join(', ') if asdf_tools is defined else 'None detected' }}"
